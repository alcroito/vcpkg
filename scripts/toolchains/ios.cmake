if(NOT _VCPKG_IOS_TOOLCHAIN)
    set(_VCPKG_IOS_TOOLCHAIN 1)

    if (VCPKG_TARGET_TRIPLET STREQUAL "arm64-ios")
        set(CMAKE_OSX_ARCHITECTURES arm64 CACHE STRING "")
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
    elseif(VCPKG_TARGET_TRIPLET STREQUAL "arm-ios")
        set(CMAKE_OSX_ARCHITECTURES arm CACHE STRING "")
        set(CMAKE_SYSTEM_PROCESSOR arm)
    elseif(VCPKG_TARGET_TRIPLET STREQUAL "x64-ios")
        set(CMAKE_OSX_ARCHITECTURES x86_64 CACHE STRING "")
        set(CMAKE_OSX_SYSROOT "iphonesimulator")
    elseif(VCPKG_TARGET_TRIPLET STREQUAL "x86-ios")
        set(CMAKE_OSX_ARCHITECTURES i386 CACHE STRING "")
        set(CMAKE_OSX_SYSROOT "iphonesimulator")
    elseif(VCPKG_TARGET_TRIPLET STREQUAL "fat-ios")
        set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64" CACHE STRING "")
        # For CMake configuration purposes, the main architecture
        # to be considered is the device one (arch64).
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
    else()
        message(FATAL_ERROR "Unknown ABI for target triplet ${VCPKG_TARGET_TRIPLET}")
    endif()

    set(CMAKE_SYSTEM_NAME iOS CACHE STRING "")

    get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )
    if(NOT _CMAKE_IN_TRY_COMPILE)
        string(APPEND CMAKE_C_FLAGS_INIT " -fPIC ${VCPKG_C_FLAGS} ")
        string(APPEND CMAKE_CXX_FLAGS_INIT " -fPIC ${VCPKG_CXX_FLAGS} ")
        string(APPEND CMAKE_C_FLAGS_DEBUG_INIT " ${VCPKG_C_FLAGS_DEBUG} ")
        string(APPEND CMAKE_CXX_FLAGS_DEBUG_INIT " ${VCPKG_CXX_FLAGS_DEBUG} ")
        string(APPEND CMAKE_C_FLAGS_RELEASE_INIT " ${VCPKG_C_FLAGS_RELEASE} ")
        string(APPEND CMAKE_CXX_FLAGS_RELEASE_INIT " ${VCPKG_CXX_FLAGS_RELEASE} ")

        string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
    endif()
endif()
